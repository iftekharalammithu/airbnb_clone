
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createAt DateTime @default(now())
  update DateTime @updatedAt
  favoriteIds String[] @db.ObjectId

  accounts Account[]
  listings Listing[]
  reservations Reservation[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId] , references: [id] ,onDelete: Cascade)

  @@unique([provider , providerccountId])
}

model Listing {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    title String
    description String
    imageSrc String
    createAt DateTime @default(now())
    roomCount Int
    bathroomCount Int
    guestCount Int
    locationValue String
    userId String @db.ObjectId
    price Int

    user User @relation(fields: [userId] , references: [id] , onDelete: Cascade)
    reservations Reservation[]
}

model Reservation {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    listingId String @db.ObjectId
    startDate DateTime
    endDate DateTime
    totalPrice Int
    createAt DateTime @default(now())

    user User @relation(fields: [userId] , references: [id] , onDelete: Cascade)
    listing Listing @relation(fields: [listingId] , references: [id] , onDelete : Cascade)

}